LOCK 类，不同于synchronized，是需要手动释放锁的，一般释放锁的操作放在finally。
LOCK 有重入锁的概念，可重入锁也叫递归锁，指的是同一线程外层函数获得锁之后，内存递归函数仍然有获取该锁的代码，但是不受影响。
一个线程在执行一个带锁的方法，该方法中又调用了另一个需要相同锁的方法，则该线程可以直接执行调用的方法，而无需重新获得锁。
java 的ReentranLock 和 synchronized都是可重入锁
可重入锁是为了防止死锁。

例：

Public class A{
    public synchronized void get(){
        set(); //在这里获得锁之后，调用set不受影响。
    }

    public synchronized int set(){
        //TODO
    }
}

*可重入锁的意义在于防止死锁
 *实现原理实现是通过为每个锁关联一个请求计数和一个占有它的线程。
 *当计数为0时，认为锁是未被占有的。线程请求一个未被占有的锁时，jvm讲记录锁的占有者，并且讲请求计数器置为1 。
 *如果同一个线程再次请求这个锁，计数将递增；
 *每次占用线程退出同步块，计数器值将递减。直到计数器为0,锁被释放。
 *
 *关于父类和子类的锁的重入:
 *子类覆写了父类的synchonized方法，然后调用父类中的方法，
 *此时如果没有重入的锁，那么这段代码将产生死锁。
 *


synchronized  因为涉及到同步，如果线程多会导致资源竞争激烈，系统响应会慢。
LOCK 实现了读写锁，可以进行读写锁的分离。即读读不互斥，读写互斥，写写互斥。这样可以在线程多的情况下不会因为同步问题导致系统性能慢。
Lock 的效率是比价稳定，在线程少的情况下synchronized是优于lock ，但是线程多的情况则相反。
实现方式是使用 ReentranWriteLock 可重入读锁   ReentranReadLock 可重入读锁。
ReentranLock 可以响应中断 lock.lockInterruptibly();// 注意这里，可以响应中断
synchronized 无法响应中断。




